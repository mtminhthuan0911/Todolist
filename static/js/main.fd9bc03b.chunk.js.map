{"version":3,"sources":["logo.svg","Main/Components/Header.jsx","Redux/types/TodolistTypes.jsx","Redux/actions/TodolistAction.jsx","Main/Todolist.jsx","App.js","reportWebVitals.js","Redux/reducers/TodolistReducer.jsx","Redux/reducers/rootReducer.jsx","index.js"],"names":["Header","className","href","src","alt","Component","ADD_TASK","Done_Task","Del_Task","Ref_Task","Edit_Task","Update_Task","DoneTask","taskID","type","DelTask","RefTask","EditTask","task","UpdateTask","taskname","Todolist","state","value","errors","disabled","renderTaskTodo","props","tasklist","filter","done","map","index","id","onClick","dispatch","class","setState","renderTaskCompleted","tasks","this","action","onChange","e","target","console","log","name","placeholder","htmlFor","event","preventDefault","newTask","Date","now","AddTaskAction","preProps","preState","taskedit","connect","TodolistReducer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","trim","Swal","fire","icon","title","text","tasklistUpdate","findIndex","push","position","showConfirmButton","confirmButtonColor","listUpdate","taskUpdate","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd9bc03b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"container\">\r\n                    <a href=\"https://mtminhthuan0911.github.io/\"><img className=\"logoPage\" src=\"/Z.svg\" alt=\"\" />\r\n                    <p className=\"txtHeading\">Have A Good Day !</p></a>\r\n                    {/* <div class=\"avatar-center avatar-status\">\r\n                         <span class=\"_status\"></span>\r\n                         <img src=\"/avatar.png\" alt=\"\" class=\"image-cover avatar-image\"></img>\r\n                    </div> */}\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export const ADD_TASK = 'ADD_TASK';\r\nexport const Done_Task = 'Done_Task';\r\nexport const Del_Task = 'Del_Task';\r\nexport const Ref_Task = 'Ref_Task';\r\nexport const Edit_Task = 'Edit_Task';\r\nexport const Update_Task = 'Update_Task';","import { ADD_TASK , Done_Task , Del_Task , Ref_Task , Edit_Task , Update_Task } from \"../types/TodolistTypes\";\r\n\r\nexport const AddTaskAction = (newTask) => ({\r\n    type: ADD_TASK,\r\n    newTask\r\n})\r\n\r\nexport const DoneTask = (taskID) => ({\r\n\r\n    type : Done_Task,\r\n    taskID\r\n\r\n}) \r\n\r\nexport const DelTask = (taskID) => ({\r\n    type : Del_Task,\r\n    taskID\r\n})\r\n\r\nexport const RefTask = (taskID) => ({\r\n    type : Ref_Task,\r\n    taskID\r\n})\r\n\r\nexport const EditTask = (task) => ({\r\n    type : Edit_Task,\r\n    task\r\n})\r\n\r\nexport const UpdateTask = (taskname) => ({\r\n    type : Update_Task,\r\n    taskname\r\n})\r\n","import React, { Component, Fragment } from 'react'\r\nimport Header from './Components/Header';\r\nimport Swal from 'sweetalert2';\r\nimport {connect} from 'react-redux';\r\nimport { AddTaskAction, DelTask, DoneTask , RefTask , EditTask , UpdateTask } from '../Redux/actions/TodolistAction';\r\n\r\nclass Todolist extends Component {\r\n\r\n    state = {\r\n        value : {\r\n            \"YourTask\" : ''\r\n        },\r\n        errors : {\r\n            \"YourTask\" : ''\r\n        },\r\n        disabled : true\r\n\r\n       \r\n    }\r\n\r\n    // ChangeBinding = (event) => {\r\n    //         let {name,value} = event.target;\r\n    //         let ValueUpdate = {...this.state.value,[name] : value};\r\n    //         let ErrorsUpdate = {...this.state.errors}\r\n    //         if(value.trim() === '')\r\n    //         {\r\n    //             ErrorsUpdate[name] = name + ' ' + 'is required !';\r\n    //         }\r\n    //         else{\r\n    //             ErrorsUpdate[name] = '';\r\n    //         }\r\n\r\n    //         this.setState({\r\n    //             value : ValueUpdate,\r\n    //             errors : ErrorsUpdate\r\n    //         },() =>{\r\n    //             console.log(this.state);\r\n    //         })\r\n    // }\r\n\r\n    // HandleSubmit = (event) => {\r\n    //     event.preventDefault();\r\n    //     let {value,errors} = this.state;\r\n    //     let valid = true;\r\n    //     for(let key in value) {\r\n    //         if(value[key] == '')\r\n    //         {\r\n                \r\n    //             valid = false;\r\n    //         }\r\n    //     }\r\n    //     for(let key in errors)\r\n    //     {\r\n    //         if(errors[key] !== '')\r\n    //         {\r\n    //             valid = false;\r\n    //         }\r\n    //     }\r\n\r\n    //     if(!valid){\r\n    //         Swal.fire({\r\n    //             icon: 'error',\r\n    //             title: 'Oops...',\r\n    //             text: 'Something went wrong!',\r\n    //             footer: '<a href=\"\">Why do I have this issue?</a>'\r\n    //           })\r\n    //         return\r\n    //     }\r\n    //     else{\r\n    //         Swal.fire({\r\n    //             position: 'top-center',\r\n    //             icon: 'success',\r\n    //             title: 'Your work has been saved',\r\n    //             showConfirmButton: true,\r\n    //           })\r\n    //         return;\r\n    //     }\r\n    // }\r\n\r\n\r\n    renderTaskTodo = () => {\r\n        return this.props.tasklist.filter(task => !task.done).map((task,index) => {\r\n            return (\r\n                <div key={index} className=\"Component\">\r\n                <p id=\"txtHeading3\" className=\"txtHeding3\">{task.taskname}</p>\r\n               <div className=\"process\">\r\n               <button onClick={ () =>\r\n\r\n                    this.props.dispatch(DoneTask(task.id))\r\n\r\n               } className=\"Icons\"><i class=\"fas fa-check\"></i></button>\r\n\r\n\r\n                <button onClick={()=>\r\n                    \r\n                    this.setState({\r\n                        disabled : false\r\n                    }, () => {\r\n                        this.props.dispatch(EditTask(task))\r\n                    })\r\n                    \r\n                   }  className=\"Icons\"><i class=\"far fa-edit\"></i>\r\n                    \r\n                </button>\r\n\r\n\r\n\r\n                <button onClick={() => {\r\n\r\n                    this.props.dispatch(DelTask(task.id))\r\n\r\n\r\n                }} className=\"Icons\"><i class=\"far fa-trash-alt\"></i></button>\r\n               </div>\r\n             </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    renderTaskCompleted = () => {\r\n        return this.props.tasklist.filter(tasks => tasks.done).map((tasks,index) => {\r\n            return (\r\n                <div key = {index} className=\"Component\">\r\n                                <p id=\"txtHeading3\" className=\"txtHeding3\">{tasks.taskname}</p>\r\n                                <div className=\"process\">\r\n                                   <button className=\"Icons green\"><i class=\"fas fa-check\"></i></button>\r\n                                    <button onClick = {\r\n                                        () => this.props.dispatch(RefTask(tasks.id))\r\n                                    } className=\"Icons\"><i class=\"fa fa-refresh\" aria-hidden=\"true\"></i></button>\r\n                                    <button onClick = {() => {\r\n\r\n                                        this.props.dispatch(DelTask(tasks.id))\r\n\r\n                                    }} className=\"Icons\"><i class=\"far fa-trash-alt\"></i></button>\r\n                                </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    // ComponentWillReceiveProps(newProps) :\r\n    // ====>>>> Nhận vào 1 Props mới và được thực thi trước hàm render\r\n    // componentWillReceiveProps(newProps) \r\n    // {\r\n    //     this.setState({\r\n    //         taskname : newProps.taskedit.taskname\r\n    //     })\r\n    // }\r\n\r\n\r\n    // Life Cycle tính không truy xuát từ con trở this\r\n    // static getDerivedStateToProps( newProps, currentState)\r\n    // {\r\n    //     //NewProps : là props mới , props cũ là this.props(không truy xuất được con trỏ this)\r\n    //     //currentState : tương đương với this.state hiện tại \r\n    //     //hoặc trả về state mới : \r\n    //     let newState  = {...currentState,taskname : newProps.taskedit.taskname}\r\n    //     return newState;\r\n    //     return null;\r\n    // }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n           <div>\r\n                <Header></Header>\r\n\r\n                {/* Header Component */}\r\n\r\n                {/* ToDoList Component */}\r\n                <div className=\"Block flex\">\r\n                    <div className=\"content\">\r\n                            <p className=\"txtHeading2\">Task To Do</p>\r\n                            <div className=\"content-tasklist\">\r\n                                    {this.renderTaskTodo()}\r\n                            </div>\r\n                            <p className=\"txtHeading2\">Task Completed</p>\r\n                            <div className=\"content-tasklist\">\r\n                                {this.renderTaskCompleted()}\r\n                            </div>\r\n                    </div>\r\n                    {/* Left Component */}\r\n                    <div className=\"list\">\r\n                           <form  action=\"\">\r\n                               <p className=\"txtHeading3\">What's The Plan For To Day ?</p>\r\n                               <div className=\"list-data\">\r\n                               {/* Mỗi lần người dụng nhập liệu vào \r\n                                    lấy value và thay đổi trực tiếp trên state\r\n\r\n                                \r\n                               */}\r\n                                <input value={this.state.taskname} onChange={(e) => {\r\n                                    this.setState({\r\n                                        taskname:e.target.value\r\n                                    },() => {\r\n                                        console.log(this.state);\r\n                                    })\r\n\r\n                                }} name = \"YourTask\" className=\"YourTask\" type=\"text\" placeholder=\" \"/>\r\n                                <label htmlFor=\"\">Your Task</label>\r\n                               \r\n                               </div>\r\n                               <div className=\"btn_process\">\r\n                                   <button onClick={(event) => {\r\n                                        //lấy thông tin người dùng \r\n                                        event.preventDefault();\r\n                                        let{taskname} = this.state;\r\n\r\n                                        //Tạo ra 1 task object : \r\n\r\n                                        let newTask = {\r\n                                            id : Date.now(), //09111999\r\n                                            taskname : taskname,\r\n                                            done : false\r\n                                        }\r\n                                        console.log(newTask);\r\n\r\n                                        this.props.dispatch(AddTaskAction(newTask))\r\n\r\n                                   }} type=\"submit\" className=\"btn primary\"> <i class=\"fa fa-plus\" aria-hidden=\"true\"></i> Add Task </button>\r\n\r\n                                   {this.state.disabled ? <button disabled onClick={(event) => {\r\n                                    event.preventDefault();\r\n                                    this.props.dispatch(UpdateTask(this.state.taskname))\r\n                                   }} className=\"btn second\"> <i class=\"fas fa-edit \"></i> Update Task </button> :\r\n\r\n                                   <button onClick={(event) => {\r\n                                    event.preventDefault();\r\n                                    let {taskname} = this.state;\r\n                                    this.setState({\r\n                                        disabled : true,\r\n                                        taskname : ''\r\n                                    }, () => {this.props.dispatch(UpdateTask(taskname))})\r\n                                   }} className=\"btn second\"> <i class=\"fas fa-edit \"></i> Update Task </button>\r\n                                   \r\n                                   }\r\n                                   \r\n                               </div>\r\n                               {/* <p className=\"txtNoti\" htmlFor=\"\">{this.state.errors.YourTask}</p> */}\r\n                              \r\n                           </form>\r\n                    </div>\r\n                </div>\r\n           </div>\r\n        )\r\n    }\r\n\r\n    //LifeCycle componentDidUpdate chạy sau khi hàm render thực hiện\r\n    //Trả về props và state cũ của component trức khi render\r\n\r\n    componentDidUpdate(preProps , preState) \r\n    {   \r\n        if(preProps.taskedit.id !== this.props.taskedit.id)\r\n        {\r\n            this.setState({\r\n                taskname : this.props.taskedit.taskname\r\n            })\r\n        }\r\n\r\n\r\n        \r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tasklist : state.TodolistReducer.tasklist,\r\n        taskedit : state.TodolistReducer.taskedit\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Todolist)","import logo from './logo.svg';\nimport Todolist from './Main/Todolist';\nimport './SASS/Style/style.css'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todolist></Todolist>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_TASK , Done_Task , Del_Task , Ref_Task, Edit_Task, Update_Task } from \"../types/TodolistTypes\"\r\nimport Swal from 'sweetalert2';\r\n\r\nconst initialState = {\r\n\r\n    tasklist : [\r\n        {id : 'task-1',taskname:'Code Sidebar',done:true},\r\n        {id : 'task-2',taskname:'Code Landingpage FastFood',done:false},\r\n        {id : 'task-3',taskname:'Code Function Add item',done:true},\r\n        {id : 'task-4',taskname:'Details Product Page',done:false},\r\n    ] , \r\n\r\n    taskedit : [\r\n\r\n        {id : '-1',taskname:'Code Sidebar',done:false},\r\n\r\n    ]\r\n\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TASK : {\r\n           console.log('todo',action.newTask);\r\n           if(action.newTask.taskname.trim() === '') {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'Task Name is required !',\r\n            })\r\n               return {...state}\r\n           }\r\n           let tasklistUpdate = [...state.tasklist];\r\n           //kiểm tra trùng\r\n           let index = tasklistUpdate.findIndex(task => task.taskname === action.newTask.taskname);\r\n           if(index !== -1)\r\n           {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: 'Task already exit !',\r\n                })\r\n               return {...state}\r\n           }\r\n           else{\r\n                tasklistUpdate.push(action.newTask);\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Your plan have been saved',\r\n                    showConfirmButton: true,\r\n                    confirmButtonColor: '#0099ff'\r\n                  })\r\n           }\r\n          \r\n\r\n           state.tasklist = tasklistUpdate;\r\n           return {...state};\r\n        }\r\n        \r\n        case Done_Task : {\r\n            // console.log('done',action);\r\n\r\n            let listUpdate = [...state.tasklist];\r\n            let index = listUpdate.findIndex(task => task.id === action.taskID);\r\n\r\n            if(index !== -1) \r\n            {\r\n                listUpdate[index].done = true;\r\n            }\r\n\r\n            return {...state,tasklist:listUpdate};\r\n        }\r\n\r\n\r\n        case Del_Task : {\r\n            \r\n            let tasklistUpdate = [...state.tasklist];\r\n\r\n            tasklistUpdate = tasklistUpdate.filter(task => task.id !== action.taskID);\r\n            \r\n            return {...state,tasklist:tasklistUpdate};\r\n             \r\n        }\r\n\r\n        case Ref_Task : {\r\n            \r\n             // console.log('done',action);\r\n\r\n             let listUpdate = [...state.tasklist];\r\n             let index = listUpdate.findIndex(task => task.id === action.taskID);\r\n \r\n             if(index !== -1) \r\n             {\r\n                 listUpdate[index].done = false;\r\n             }\r\n \r\n             return {...state,tasklist:listUpdate};\r\n        }\r\n\r\n        case Edit_Task : {\r\n            \r\n            return {...state,taskedit:action.task}\r\n\r\n        }\r\n\r\n        case Update_Task : {\r\n            //Chỉnh Sửa lại taskname của taskedit\r\n            state.taskedit = {...state.taskedit,taskname : action.taskname};\r\n            let taskUpdate = [...state.tasklist];\r\n            //Tìm trong taskList cập nhật lại taskedit người dùng update\r\n            let index = taskUpdate.findIndex(task => task.id === state.taskedit.id)\r\n            //\r\n            console.log(index)\r\n            if(index !== -1) \r\n            {\r\n                taskUpdate[index] = state.taskedit;\r\n            }\r\n\r\n            state.tasklist = taskUpdate;\r\n            state.taskedit = {id : '-1',taskname:'',done:false}\r\n            Swal.fire({\r\n                position: 'top-center',\r\n                icon: 'success',\r\n                title: 'Update Success',\r\n                showConfirmButton: true,\r\n                confirmButtonColor: '#0099ff'\r\n              })\r\n            return {...state}\r\n\r\n        }\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { combineReducers } from 'redux'\r\nimport TodolistReducer from './TodolistReducer'\r\nexport const rootReducer = combineReducers ({\r\n    // ToDoListReducer\r\n    TodolistReducer\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport { rootReducer } from './Redux/reducers/rootReducer';\n\nconst store = createStore (rootReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n\nReactDOM.render(\n \n    <Provider store = {store}>\n      <App />\n    </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}